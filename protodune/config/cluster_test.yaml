# Test config file for Blip
module:
  module_type:  'training'
  gpu:          True
  gpu_device:   0

dataset:
  # If this is the first time processing the simulation output
  process_simulation: False
  simulation_folder:  "/home/ncarrara/physics/DUNE/BlipModels/protodune/data/"
  simulation_files:   [
    "protodune_mc_0.root",
    "protodune_mc_1.root",
    "protodune_mc_2.root",
    "protodune_mc_3.root",
    "protodune_mc_4.root",
    "protodune_mc_5.root",
    "protodune_mc_6.root",
    "protodune_mc_7.root",
    "protodune_mc_8.root",
    "protodune_mc_9.root",
    "protodune_mc_10.root",
  ]

  # Otherwise, we want to just load the resulting data
  dataset_type:   "cluster"
  dataset_folder: "/home/ncarrara/physics/DUNE/BlipModels/protodune/data/"
  dataset_files:  [
    "blip_simulation_0/view2_tpc1.npz",
    "blip_simulation_0/view2_tpc2.npz",
    "blip_simulation_0/view2_tpc5.npz",
    "blip_simulation_0/view2_tpc6.npz",
    "blip_simulation_0/view2_tpc9.npz",
    "blip_simulation_0/view2_tpc10.npz",
  ]

  # clustering related parameters
  dbscan_min_samples: 6
  dbscan_eps:         10.0
  cluster_class:      "shape"
  cluster_label:      "blip"
  cluster_positions:  ["channel", "tdc"]

  positions:  ["channel", "tdc", "adc"]
  features:   []
  classes:    ["particle"]

  # we can regroup classes to reduce their number,
  # e.g., say we want to train so that there are
  # only two important shapes, "blip" and "not-blip",
  # then we would consolidate like below:
  consolidate_classes:  
  #   shape:  [["blip"], [""]]
  
  sample_weights: []
  class_weights:  []
  normalized:     False
  root:           "."
  skip_processing:  False
  transform:      null
  pre_transform:  null
  pre_filter:     null

loader:
  loader_type:      "minkowski"
  batch_size:       32
  test_split:       0.1
  test_seed:        100
  validation_split: 0.2
  validation_seed:  101
  num_workers:      4

training:
  epochs:       2
  checkpoint:   10
  progress_bar: 'all'   # train, validation, test, all
  rewrite_bar:  False   # wether to leave bars after each epoch
  save_predictions: True  # wether to save network outputs in original file
  no_timing:  False     # wether to keep timing/memory info in callback
  seed:       42

model:
  # uncomment the line below and specify the model
  # to load from a checkpoint.
  # load_model:   ".checkpoints/checkpoint_200.ckpt"

  # multiple options for model_type: 
  # [ "SparseUNet", "PointNet", "UNet", ... ]
  # or a Composite.
  model_type:           "PointNet"  
  input_dimension:      3
  classifications:      ["particle"]
  augmentations:
    jitter: 0.03
    flip:
      positions:     [0, 1]
      probabilities: [0.5, 0.5]
    shear:  0.2
  number_of_augmentations:  5
  embedding_type:       "dynamic_edge_conv"
  number_of_embeddings: 4
  number_of_neighbors:  [5, 10, 20, 30]    
  aggregation:          ["max", "max", "max", "max"]
  embedding_mlp_layers: [
    [5, 10, 25, 10],
    [10, 25, 50, 25],
    [20, 30, 40, 30],
    [30, 50, 75, 50]
  ]
  linear_output:        128
  mlp_output_layers:    [128, 256, 32]
  out_channels:         [32]
  
criterion:
  MultiClassProbabilityLoss:
    alpha:    1.0
    classes:  ["particle"]
  NTXEntropyLoss:
    alpha:  1.0
    classes:  ["reductions"]
    
metrics:
  ConfusionMatrixMetric:
    mode:   "cluster"
    inputs: ["particle"]
    number_of_classes: [32]

callbacks:
  LossCallback:
  ConfusionMatrixCallback:
    sig_acceptance: [0.1, 0.5, 0.9]

optimizer:
  optimizer_type: "Adam"
  learning_rate:  0.01
  betas:          [0.9, 0.999]
  epsilon:        1e-08
  weight_decay:   0.001
  momentum:       0.9
